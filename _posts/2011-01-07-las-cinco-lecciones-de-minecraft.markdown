---
layout: post
title: Las cinco lecciones de Minecraft
---

# {{ page.title }}

{{ page.date | date: "%d/%m/%Y"}} &ndash; Barcelona

Nunca hasta ahora un videjuego como Minecraft había despertado tanto mi curiosidad. Si todavía no lo conocéis, Minecraft es un juego del tipo *sandbox* en el que los jugadores pueden crear y destruir a sus anchas todo tipo de cosas. Aparte del éxito comercial del juego (a día de hoy, casi un millón de personas lo ha comprado) y el haber transcendido los límites de la escena *indie* para convertirse en lo que puede ser el fenómeno del 2011, Minecraft demuestra, una vez más, el potencial de una manera de comprender, hoy en día, el desarrollo de un proyecto. Las cinco *lecciones* de Minecraft que describo a continuación no pretenden ser una fórmula exacta y sistemática de cómo obtener éxito seguro. No es esta mi intención. Por el contrario, creo que estas *lecciones* pueden servirnos de reflexión en el momento de emprender un nuevo proyecto, personal o profesional y que, claro está, si en un principio podemos pensar que no todos los proyectos pueden traducirse o verse afectadas por alguna o todas las *cinco lecciones*, con el paso del tiempo iremos viendo cómo surgen nuevas y más iniciativas personales que, sin ser necesariamente un videojuego, acabaran teniendo una suerte parecida a la de Minecraft. 

* **Lección primera: Alimenta el prolífico 1%**. Siempre he creído que todo proyecto despierta siempre con un 1% prolífico. Si el proyecto lo conoces diez personas, es altamente probable que una de estas se apasione y ayude o contribuya a mejorar el proyecto mientras que los nueve restantes adoptaran sin muchos problemas el *rol de lurkers*. El concepto del 1% no es novedad. El 99% de contenidos que se encuentran en la web actual estan generados por ese 1% activo y participativo. Esta simple relación de producción de contenidos en la web suele demostrarse con espacios como Wikipedia o incluso Twitter, donde son más bien pocos los que producen la información que el resto de usuarios consume. Si en un primer momento podemos percibir negativamente esta relación de producción/participación entre usuarios de un proyecto, no hemos de olvidar que, justamente el esfuerzo de participación de este prolífico 1% en el proyecto, en clave de creación de contenidos o de difusión de trabajos derivados, conseguirá un efecto vírico superior a cualquier otro método tradicional de publicidad del proyecto. Por este motivo, como puede leerse en el artículo [Minecraft Illustrates the Two Keys to a Sandbox Game](http://thegameprodigy.com/minecraft-illustrates-the-two-keys-to-a-sandbox-game/), *In order for the Prolific 1% to prosper, they need to feel like their work is safe and that the resulting creations aren’t abused.* como tampoco conviene para el crecimiento del proyecto que el 1% se erija como círculo autocrático del mismo, lo que acabaría alejando el interés por participar del 99% de usuarios.

* **Lección segunda: El poder de la periferia** o, parafresando a [Walter Benjamin](http://es.wikipedia.org/wiki/Walter_Benjamin), las obras en **la época de su recreatividad técnica** nos proporciona un nuevo escenario en el que la difusión de aquellas ya no circulan por los medios tradicionales u oficiales de publicidad controlada, sino por las  demostraciones heterogéneas por parte del prolífico 1%. Si el boca-oreja funciona, la recreación técnica es la sublimación emocional del usuario con el producto y, por lo tanto, la sugestión más poderosa a quienes todavía no conocen la obra original. Este flujo continuo de recreaciones *soft* (orientado a la difusión de conocimientos), como son vídeos publicados en YouTube, imágenes, tutoriales, documentación, *mods*, adaptaciones, conversaciones, etc., o *hard* (los conocimientos aplicados a la transfiguración del producto original) como son aplicaciones, visualizadores, graficos o incluso *proyectos de hardware*, otorgan al producto original la autenticidad de obra de culto. Esta periferia se convertirá, a sí mismo, en la mejor publicidad del producto y, al mismo tiempo, la entrada directa a quienes todavía no lo conocen.
* **Lección tercera: la idea de *opera aperta* de Eco** como mejor ejemplo de por qué una proyecto actual, gracias a las recreaciones técnicas de la periferia, acaba en convertirse en una fuente inagotable de inspiración. En este sentido, la obra *terminada* como consecuencia de un [proceso de desarrollo en cascada](http://en.wikipedia.org/wiki/Waterfall_model) podrá acabar siendo un buen producto, pero difícilmente dejará espacio a la *recreación* colectiva. En este sentido, los proyectos individuales o formados por equipos pequeños demuestran mayor efectividad en la materialización del proyecto cuanto menor es su tendencia a burocratizar los procesos de trabajo. Por otro lado, siguiendo en esta reflexión, es preferible alejarse de ideas definitorias (acaban convirtiéndose en la tumba del proyecti) y sí participar de conceptos generales que, con el tiempo, puedan gravitar sin dificultad aportaciones e ideas nuevas. *I've got a few plans and visions, but my only true design decision is to keep it fun and accessible. There's no design doc, but there are two lists; one for bugs, and one for features I want to add but think I might forget.* [Development and philosophy of Minecraft](http://www.minecraft.net/about.jsp)
* **Lección cuarta: Hacia el agnosticismo tecnológico**. Minecraft está desarrollado en Java. Muchos desarrolladores podrían criticar la elección de este lenguaje (más extendido en el ámbito empresarial que no en el del videojuego) a favor de otros más eficientes por las características del juego. El desarrollador no eligió una tecnología pensando que tendría, al cabo de un año,  Nun millón de jugadores de su videojuego y que, por lo tanto, debería ir con especial cuidado en el desarrollo tecnológico del juego. Todo lo contrario, elegió unas tecnologías que le permitieran cristalizar en un tiempo corto las diferentes ideas que tenía sobre el juego. Si visitamos las primeras entradas del blog de [Markus Notch](http://notch.tumblr.com/archive/2009/5) comprobaremos que el corazón del juego ya estaba implementado. Posiblemente, por su experiencia como desarrollador de videojuegos *indie*, no tardó mucho tiempo (¿semanas?) el *engine* o motor de Minecraft. Las herramientas de desarrollo no han de suponer un lastre o un problema de antemano. Otros juegos adictivos con tecnologías incluso más simples que las utilizadas en el desarrollo de juegos comerciales (la emergencia de los juegos en las redes sociales) están cautivando a millones de usuarios. Y que, finalmente, no es tan importante decidir de antemano las soluciones a todos los problemas técnicos futuros cuando, como problemas, siguen siendo imaginarios. Por el contrario, el uso ágil de las tecnologías disponibles en la actualidad, el que los creadores se puedan sentir en mayor grado cómodos para centrar sus esfuerzos en el desarrollo rápido del proyecto, sin pensar demasiado en *bugs* o *limitaciones de performance*. Luego, si más tarde nos asaltan un millón de jugadores, ya se tomarán las decisiones que hagan falta para corregir las deficiencias técnicas originales.
* **Lección quinta: Participar, reciclar, reinventar, remezclar**. Y aumentar la visibilidad de tus opiniones, actividades, proyectos, trabajos. Markus Notch no era un desconocido en el mundo de los *indie games*. Podemos leer las impresiones de los primeros jugadores de Minecraft en [TIGForums](http://forums.tigsource.com/index.php?topic=6273.0) en el que el propio Markus responde a las preguntas, sugerencias o dudas de los que van probando el juego. Participar de las misma conversación de los que, potencialmente pueden ser nuestro 1% prolífico, ha de ser necesario como algo natural. Minecraft nació de la experiencia *negativa* de [Infiniminer](http://www.minecraftwiki.net/wiki/Infiniminer) y de la pasión por un juego tanto atípico como oscuro, [Dwarf Fortress](http://www.bay12games.com/dwarves/). La remezcla, la conversación y la pasión por la transpiración ágil de la ideas han conformado el nacimiento y crecimiento de Minecraft. Y gracias a Minecraft, otros desarrolladores independientes verán, en este y otros juegos, limitaciones que les llevaran a la creación de un nuevo *hit*. 